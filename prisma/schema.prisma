// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserDiscord         UserDiscord?
  UserSession         UserSession[]
  EmailAuthentication EmailAuthentication?
  UserRole            UserRole[]
  Commentator         Commentator[]

  @@map("users")
}

model UserDiscord {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @unique @db.Uuid
  discordId    String   @unique @db.VarChar(255)
  username     String   @db.VarChar(255)
  accessToken  String
  refreshToken String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("user_discords")
}

model UserSession {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  token     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("user_sessions")
}

model EmailAuthentication {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  token     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("email_authentications")
}

model UserRegistration {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  token     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_registrations")
}

enum Role {
  Admin
}

model UserRole {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, role])
  @@map("user_roles")
}

model EventGroup {
  id        String   @id @default(uuid()) @db.Uuid
  shortName String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Event Event[]

  @@map("event_groups")
}

model Event {
  id           String   @id @default(uuid()) @db.Uuid
  eventGroupId String   @db.Uuid
  shortName    String   @unique
  name         String
  startDate    DateTime
  finished     Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  dataSourceType String
  dataSourceId   String

  eventGroup EventGroup @relation(fields: [eventGroupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Run        Run[]

  @@map("events")
}

model Run {
  id      String @id @default(uuid()) @db.Uuid
  eventId String @db.Uuid

  title         String
  category      String
  duration      Int
  setupDuration Int
  order         Int
  runners       String[]

  twitchVodUrl  String?
  youtubeVodUrl String?

  originalId    String
  originalTitle String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event       Event         @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Commentator Commentator[]

  @@unique([eventId, originalId])
  @@map("runs")
}

model Commentator {
  id        String   @id @default(uuid()) @db.Uuid
  runId     String   @db.Uuid
  userId    String?  @db.Uuid
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  run  Run   @relation(fields: [runId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("commentators")
}
